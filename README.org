#+TITLE: PyFlit Quick Reference
#+OPTIONS: toc:nil

*Pyflit is a simple HTTP downloader.*


* Features
  * HTTP GET
  * multi-threaded fetch multiple URLs 
  * multi-segment file fetch
  * gzip/deflate/bzip2 compression supporting
  * a simple progress-bar
  * download pause and resume
  * proxy supporting

* Simple Tutorial
  * *HTTP GET*

    First, get self defined URL opener object, you can specify some handlers to 
    support cookie, authentication and other advanced HTTP features. If you want change
    the `User-Agent` or add `Referer` in the HTTP request headers, you can also 
    given a self defined `headers` as argument. And more, you can turn on proxy
    by given a dictionary of proxy address. See the API reference for details.

    Example:
    #+BEGIN_SRC python
      handlers = [cookie_handler, redirect_handler]
      headers = {'User-Agent': 'Mozilla/5.0 ' \
                     '(Macintosh; Intel Mac OS X 10_8) ' \
                     'AppleWebKit/536.25 (KHTML, like Gecko) ' \
                     'Version/6.0 Safari/536.25'}
      proxies = {'http': 'http://someproxy.com:8080'}
      
      opener = flit.get_opener(handlers, headers, proxies)
      u = opener.open("http://www.python.org")
      resp = u.read()
    #+END_SRC

  * *Multiple URLs fetching*

    You can just call `flit.flit_tasks()` to fetch multiple URLs with specified
    working thread number and process the data chunk at the same time.
    
    Example:
    #+BEGIN_SRC python 
      from pyflit import flit
      
      def chunk_process_func(chunk):
          """Output chunk information.
          """
          print "Status_code: %s\n%s\n%s \nRead-Size: %s\nHistory: %s\n"%(
                  chunk['status_code'],
                  chunk['url'],
                  chunk['headers'],
                  len(chunk['content']),
                  chunk.get('history', None))
      
      links = ['http://www.domain.com/post/%d/'%i for i in xrange(100, 200)]
      thread_number = 5
      opener = flit.get_opener([handlers [, headers [, proxies]]])
      flit.flit_tasks(links, thread_number, chunk_process_func, opener)
    #+END_SRC
  
  * *Multiple segment file downloading*

    Multiple segment file downloading use multiple thread to download the separated
    part of the URL file, you can simply give two arguments: URL address and the
    segment number.

    Example:
    #+BEGIN_SRC python 
      from pyflit import flit
      
      url = "https://dl.google.com/chrome/mac/stable/GGRO/googlechrome.dmg"
      segment_number = 2
      opener = flit.get_opener([handlers [, headers [, proxies]]])
      flit.flit_segments(url, segment_number, opener)
    #+END_SRC

  * See the *API Reference* for other usage help.

* API Reference
** module pyflit.flit
   * method *get_opener(handlers=[], headers={}, proxies={})*
     #+begin_example
     Get HTTP URL opener and call its `open()` method to open an URL.

     Arguments:
     - `handlers`: list, handlers support cookie, authority,
                   and other advanced HTTP features.
     - `headers`: dictionary, be treated as if add_header() was called
                  with each key and value as arguments, often used to
                  "spoof" the `User-Agent` header or `Referer` header, etc.
     - `proxies`: dictionary, URL of the proxy,
                  e.g. {'http': 'http://<host>:<port>'},
                  if your proxy requires authentication:
                  {'http': 'http://<user>:<password>@<host>:<port>'}
     #+end_example

   * class *PyFlitRequest(opener, config=settings)*
     #+begin_example
     A simple class to process HTTP url requests, e.g. get the http response,
     process the url content, and more.

     Arguments:
     - `opener`: OpenerDirector object, call its open() method to open url request.
     - `config`: dictionary, a bunch of settings, see the config module.
     #+end_example

     + method *build_resp(self, resp, is_error)*
       #+begin_example
       Build URL response to generate a dictionary with its original url address,
       status code, headers, content, charset, and the response itself if error occurred.

       Arguments:
       - `resp`: HTTPResponse, urllib2.Response object.
       - `is_error`: Boolean, flag to tell whether error occurred.
       #+end_example

     + method *get_url_response(self, url_req)*
       #+begin_example
       Send HTTP URL request, return the response
       with a flag to check if error occurs.

       Arguments:
       - `url_req`: string, HTTP request URL or urllib2.Request object.
       #+end_example

     + method *get_url_chunk(self, url_req)*
       #+begin_example
       Open HTTP URL and return the data chunk dictionary,
       see method `PyFlitRequest.build_resp()` to find the keys in it.

       Arguments:
       - `url_req`: string, HTTP request URL or urllib2.Request object.
       #+end_example

     + method *get_url_headers(self, url_req)*
       #+begin_example
       Send HTTP URL and return its HTTP response headers.

       Arguments:
       - `url_req`: string, HTTP request URL or urllib2.Request object.
       #+end_example

     + method *get_url_size(self, url_req)*
       #+begin_example
       Get url content length from http response headers or 0 if not exists.

       Arguments:
       - `url_req`: string, HTTP request URL or urllib2.Request object.
       #+end_example

     + method *get_url_file_name(self, url_req)*
       #+begin_example
       Get downloading file name from the URL response headers or the URL.
        
       Arguments:
       - `url_req`: string, HTTP request URL or urllib2.Request object.
       #+end_example

   * class *MultiTaskingThread(opener, queue_task, queue_chunk)*
     #+begin_example
     Multiple tasks downloading thread for fetching URLs.

     Arguments:
     - `opener`: function object, open the URL request and return data chunk,
                 e.g. PyFlitRequest.get_url_chunk() method.
     - `queue_task`: Queue, tasks queue.
     - `queue_chunk`: Queue, data chunk queue.
     #+end_example

   * class *MultiTasking(threads_number, opener)*
     #+begin_example
     Multi-threaded of multi-tasks downloading, then process the data chunk.

     Arguments:
     - `threads_number`: int, number of threads to download.
     - `opener`: function object, open the URL request and return data chunk,
                 e.g. PyFlitRequest.get_url_chunk() method.
     #+end_example

     + method =__call__(self, chunk_process_func, tasks=[])=
       #+begin_example
       When you get a MultiTasking object, e.g. flitter = MultiTasking(...),
       you can call this method like this: flitter(chunk_process_func, tasks),
       see Python's documentation for help.

       Arguments:
       - `chunk_process_func`: function, data chunk process function,
                               it has an dict argument `chunk`,
                               see PyFlitRequest.build_resp().
       - `tasks`: list, HTTP URLs to fetch.
       #+end_example

   * class *SegmentingThread(opener, url_req, filename, ranges=0)*
     #+begin_example
     Multi-segment file downloading thread.

     Arguments:
     - `opener`: OpenerDirector object, call its open() method to open url request.
     - `url_req`: string, http request URL.
     - `filename`: string, output file name.
     - `ranges`: list, start to end mark of the url fetch range.
     #+end_example

   * class *MultiSegmenting(opener)*
     #+begin_example
     Multi-segment file downloading for fetching big size file.

     Arguments:
     - `opener`: OpenerDirector object, call its open() method to open url request.
     #+end_example

     + method *split_segment(self, url_size, segment_number)*
       #+begin_example
       Split file size into list tuple of segments with the giving number.

       Arguments:
       - `url_size`: int, total url file size, call `self.get_url_size()` method.
       - `segment_number`: int, the numbers you want to separate the file size.
       #+end_example

     + method =__call__(self, url_req, segments=2)=
       #+begin_example
       Main process for multi-segment file downloading.
       #+end_example

   * method *flit_tasks(tasks, threads_number, chunk_process_func, opener=get_opener())*
     #+begin_example
     Multiple tasks downloading and process the data chunk, mostly used
     when grabbing amount of web pages.
    
     Arguments:
     - `tasks`: list, HTTP URLs to fetch.
     - `thread_number`: int, number of threads to download.
     - `chunk_process_func`: function, data chunk process function,
                             it has an dict argument `chunk`,
                             see PyFlitRequest.build_resp().
     - `opener`: OpenerDirector object, call its open() method to open url request.
     #+end_example

   * method *flit_segments(url_req, segment_number=2, opener=get_opener())*
     #+begin_example
     Multiple segment file downloading, a replacement of wget. ;-)
    
     Arguments:
     - `url_req`: string, http request URL.
     - `segment_number`: int, the numbers you want to separate the files.
     - `opener`: OpenerDirector object, call its open() method to open url request.
     #+end_example

** module pyflit.utils
   Utility functions.

   * class *ContentEncodingProcessor()*
     #+begin_example
     HTTP handler to add gzip/deflate/bzip2 capabilities to urllib2 requests.
     #+end_example

   * class *HTTPRedirectHandler()*
     #+begin_example
     HTTP redirect handler.
     #+end_example

   * method *progressbar(total_volume, completed_volume, progress=0)*
     #+begin_example
     A simple progressbar.

     Arguments:
     - `total_volume`: int, total volume size.
     - `completed_volume`: int, completed volume size.
     - `progress`: int, completed percent.
     #+end_example

   * method *get_terminal_size(fd=1)*
     #+begin_example
     Called in `progressbar(...)` method to return height and width 
     of current terminal. First tries to get size via termios.TIOCGWINSZ,
     then from environment.
     Defaults to 0 lines x 0 columns if both methods fail.

     Arguments:
     - `fd`: file descriptor (default: 1=stdout)
     #+end_example

   * method *dict_list_reverse(dict_list)*
     #+begin_example
     Dictionary list object reverse to process http redirection codes,
     see var codes in pyflit.config module.
     #+end_example

   * class *DictDotLookup(d)*
     #+begin_example
     Creates objects that behave much like a dictionaries, but allow nested
     key access using object '.' (dot) lookups.

     Arguments:
     - `d`: dict, reserved dict of list, tuple, or dict.
     #+end_example

* Contributing
  You can send pull requests via GitHub or help fix the bugs
  in the issues list.
